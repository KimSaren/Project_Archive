{"version":3,"sources":["util/Spotify.js","Components/App/SearchBar/SearchBar.js","Components/App/Track/Track.js","Components/App/TrackList/TrackList.js","Components/App/SearchResults/SearchResults.js","Components/App/PlayList/PlayList.js","Components/App/App.js","serviceWorker.js","index.js"],"names":["accessToken","SearchBar","props","state","term","search","bind","handleTermChange","console","log","this","onSearch","event","setState","target","value","className","placeholder","onChange","onClick","React","Component","Track","renderAction","addTrack","removeTrack","plusMinus","isRemoval","onAdd","track","onRemove","name","artist","album","TrackList","array","tracks","map","x","key","id","SearchResults","searchResults","PlayList","handleNameChange","onNameChange","playListTracks","playListName","onSave","Spotify","fetch","headers","then","response","json","promise","playlist","uri_array","method","user_id","contentType","body","JSON","stringify","post_promise","playlistID","window","location","href","match","expiresIn","setTimeout","history","pushState","App","updatePlayListName","savePlayList","find","savedTrack","new_array","length","index","findIndex","new_index","i","trackURIs","results","items","new_results","new_object","artists","Boolean","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.97c2311e.chunk.js","sourcesContent":["// Global variables used within the module\r\nlet accessToken;\r\nconst client_id = \"9be9fe90c93e4f03ad67c1175dd6a9bc\";\r\nconst redirect_uri = \"http://mySpotifyPlayListDomain.surge.sh\";\r\n\r\n\r\n// The spotify module to be imported later; contains three relevant methods for searchign and\r\n//  passing information between our application and Spotify\r\nlet Spotify = {\r\n    // This method is for getting the implicit access token for the API\r\n    getAccessToken() {\r\n        // If the token has a \"truthy\" value\r\n        if(accessToken) {\r\n            return accessToken;\r\n        }\r\n        // Second conditional: the access token and expiration time can be found in the url\r\n        else if(window.location.href.match(/access_token=([^&]*)/) && (window.location.href.match(/expires_in=([^&]*)/))) {\r\n            // Get the access token from the url\r\n            let match = window.location.href.match(/access_token=([^&]*)/);\r\n            accessToken = match[1];\r\n            let expiresIn = window.location.href.match(/expires_in=([^&]*)/)[1];\r\n\r\n            // Clear the accessToken after expiration time\r\n            window.setTimeout(() => accessToken = '', expiresIn * 1000);\r\n            window.history.pushState('Access Token', null, '/');\r\n            \r\n            return accessToken;\r\n        }\r\n        // If the access token is empty and the link does not contain it\r\n        else {\r\n            let url = \"https://accounts.spotify.com/authorize?client_id=\" + client_id + \"&response_type=token&scope=playlist-modify-public&redirect_uri=\" + redirect_uri;\r\n            window.location=url;\r\n            return accessToken;\r\n        }\r\n    },\r\n\r\n    // This method is called upon searching for a term: returns json information\r\n    async search(term) {\r\n        // Try to fetch the search data from Spotify API using the access token provided as a header\r\n        let promise = await fetch(\"https://api.spotify.com/v1/search?type=track&q=\" + term,\r\n        {\r\n            headers: {'Authorization': 'Bearer ' + accessToken}\r\n        })\r\n        // Then JSONify the information received\r\n        .then(function(response) {\r\n            return response.json();\r\n        })\r\n        return promise;\r\n    },\r\n\r\n    // This method is called to save a Playlist to Spotify\r\n    async savePlayList(playlist,uri_array) {\r\n        console.log(\"Attempting to save the playlist: \", playlist, uri_array);\r\n        if((playlist) && (uri_array)) {\r\n            // The variables\r\n            let token = accessToken;\r\n            let headers = {'Authorization': 'Bearer ' + token};\r\n            let user_id;\r\n\r\n            // First fetch: get the the user id\r\n            let promise = await fetch(\"https://api.spotify.com/v1/me\", {\r\n                headers: headers,\r\n                method: 'GET'\r\n            })\r\n            .then(function(response) {\r\n                return response.json();\r\n            })\r\n            user_id = promise.id;\r\n\r\n            // Second fetch: create the playlist to the corresponsinf user\r\n            let post_promise = await fetch(\"https://api.spotify.com/v1/users/\" + user_id + \"/playlists\", {\r\n                headers: headers,\r\n                contentType: 'application/json',\r\n                method: 'POST',\r\n                body: JSON.stringify({\r\n                    'name': playlist\r\n                })\r\n            })\r\n            .then(function(response) {\r\n                return response.json();\r\n            })\r\n            let playlistID = post_promise.id;\r\n\r\n            // Third fetch: link the list of songs to the playlist\r\n            post_promise = await fetch(\"https://api.spotify.com/v1/users/\" + user_id + \"/playlists/\" + playlistID + \"/tracks\", {\r\n                headers: headers,\r\n                contentType: 'application/json',\r\n                method: 'POST',\r\n                body: JSON.stringify({\r\n                    'uris': uri_array\r\n                })\r\n            })\r\n            .then(function(response) {\r\n                return response.json();\r\n            })\r\n            playlistID = post_promise.id;\r\n        }\r\n        return;\r\n    }\r\n};\r\n\r\n// Run this once by default to get the global access token upon execution of this application\r\nSpotify.getAccessToken();\r\n\r\n// Export this module\r\nexport { Spotify };","import React from 'react';\r\nimport './SearchBar.css';\r\n\r\n// Component representing the searchbar\r\nexport class SearchBar extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {term: ''};\r\n        this.search = this.search.bind(this);\r\n        this.handleTermChange = this.handleTermChange.bind(this);\r\n    }\r\n\r\n    // onclick method for searching the term in the searchbar\r\n    search() {\r\n        console.log(\"Trying to search for the term: \", this.state.term);\r\n        this.props.onSearch(this.state.term);\r\n    }\r\n\r\n    // Method to allow controlled user inputs in the searchbar\r\n    handleTermChange(event) {\r\n        this.setState({term: event.target.value});\r\n        \r\n    }\r\n\r\n    // A searchbar with an appropriate submit button will be rendered\r\n    render() {\r\n        return(\r\n            <div className=\"SearchBar\">\r\n                <input placeholder=\"Enter A Song, Album, or Artist\" onChange={this.handleTermChange} />\r\n                <button className=\"SearchButton\" onClick={this.search}>SEARCH</button>\r\n            </div>\r\n        );\r\n    }\r\n}","import React from 'react';\r\nimport './Track.css'\r\n\r\n// A component representing a single track in a tracklist\r\nexport class Track extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.renderAction = this.renderAction.bind(this);\r\n        this.addTrack = this.addTrack.bind(this);\r\n        this.removeTrack = this.removeTrack.bind(this);\r\n    }\r\n\r\n    // Method for determining which kind of a button will be rendered: either one with a \"+\" or a \"-\" marker and corresponding onclick methods\r\n    renderAction() {\r\n        let plusMinus = this.props.isRemoval === true ? '-' : '+'\r\n        if(plusMinus === '+') {\r\n            return <button className=\"Track-action\" onClick={this.addTrack}>{plusMinus}</button>;\r\n        }\r\n        else {\r\n            return <button className=\"Track-action\" onClick={this.removeTrack}>{plusMinus}</button>;\r\n        }\r\n    }\r\n\r\n    // Method for adding the track in the playlist\r\n    addTrack() {\r\n        this.props.onAdd(this.props.track);\r\n    }\r\n\r\n    // Method for removing the track from the playlist\r\n    removeTrack() {\r\n        this.props.onRemove(this.props.track);\r\n    }\r\n\r\n    // Track name, attributes and the appropriate button will be rendered\r\n    render() {\r\n        return(\r\n            <div className=\"Track\">\r\n            <div className=\"Track-information\">\r\n                <h3>{this.props.track.name}</h3>\r\n                <p>{this.props.track.artist} | {this.props.track.album}</p>\r\n            </div>\r\n            {/*<button className=\"Track-action\"><!-- + or - will go here --></button>*/}\r\n            {this.renderAction()}\r\n            </div>\r\n        );\r\n    }\r\n}","import React from 'react';\r\nimport { Track } from '../Track/Track.js';\r\nimport './TrackList.css';\r\n\r\n\r\n// A component representing a list of tricks. In this project this means either search results or the customised playlist.\r\nexport class TrackList extends React.Component {\r\n    // Return an array representing elements in the tracks property\r\n    render() {\r\n        let array;\r\n        if(this.props.tracks) {\r\n            array = this.props.tracks.map(x => <Track key={x.id} track={x} onAdd={this.props.onAdd} onRemove={this.props.onRemove} isRemoval={this.props.isRemoval} />);\r\n        }\r\n        return(\r\n            <div className=\"TrackList\">\r\n                {array}\r\n            </div>\r\n        );\r\n    }\r\n}","import React from 'react';\r\nimport './SearchResults.css';\r\nimport { TrackList } from '../TrackList/TrackList.js';\r\n\r\n// Component for holding the search results from the searchbar search\r\nexport class SearchResults extends React.Component {\r\n    // The title and a tracklist element will be rendered\r\n    render() {\r\n        return(\r\n            <div className=\"SearchResults\">\r\n                <h2>Results</h2>\r\n                <TrackList tracks={this.props.searchResults} onAdd={this.props.onAdd} isRemoval={false} />\r\n            </div>\r\n        );  \r\n    }\r\n}","import React from 'react';\r\nimport { TrackList } from '../TrackList/TrackList.js';\r\nimport './PlayList.css';\r\n\r\n// A component representing the users customised playlist\r\nexport class PlayList extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.handleNameChange = this.handleNameChange.bind(this);\r\n    }\r\n\r\n    // Method allowing controlled user inputs for the playlist name\r\n    handleNameChange(event) {\r\n        this.props.onNameChange(event.target.value);\r\n    }\r\n\r\n    // The title, sumbit button and the playlist element will be rendered\r\n    render() {\r\n        console.log(\"The playlist: \", this.props.playListTracks);\r\n        return(\r\n        <div className=\"Playlist\">\r\n            <input value={this.props.playListName} onChange={this.handleNameChange} />\r\n            <TrackList tracks={this.props.playListTracks} onRemove={this.props.onRemove} isRemoval={true} />\r\n            <button className=\"Playlist-save\" onClick={this.props.onSave}>SAVE TO SPOTIFY</button>\r\n        </div>\r\n        );\r\n    }\r\n}","import React from 'react';\nimport { SearchBar } from './SearchBar/SearchBar.js';\nimport { SearchResults } from './SearchResults/SearchResults.js';\nimport { PlayList } from './PlayList/PlayList.js';\nimport './App.css';\nimport { Spotify } from '../../util/Spotify.js'\n\n\n// The main component representing the Spotify PlayListSaver application\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {searchResults: [\n        {\n          name: 'Never Gonna Give You Up',\n          artist: 'Rick Astley',\n          album: 'Whenever you need somebody',\n          id: '4uLU6hMCjMI75M1A2tKUQC'\n        }\n      ],\n      playListName: 'New PlayList',\n      playListTracks: [],\n    };\n    this.addTrack = this.addTrack.bind(this);\n    this.removeTrack = this.removeTrack.bind(this);\n    this.updatePlayListName = this.updatePlayListName.bind(this);\n    this.savePlayList = this.savePlayList.bind(this);\n    this.search = this.search.bind(this);\n  }\n\n  // A method for adding a song to the playlist\n  addTrack(track) {\n    // Check whether the track is already included in the list\n    let duplicate = this.state.playListTracks.find(savedTrack => savedTrack.id === track.id);\n\n    // If the track is not a duplicate, we add it to the list\n    if(!duplicate) {\n      let new_array = this.state.playListTracks;\n      new_array[new_array.length] = track;\n      this.setState({playListTracks: new_array});\n    }\n  }\n\n\n  // A method for removing a track from the playlist\n  removeTrack(track) {\n    // Check whether the track is included in the list and save the index\n    let index = this.state.playListTracks.findIndex(savedTrack => (savedTrack.id === track.id));\n\n    // If the track is on the list, it can be removed\n    if(index > -1) {\n      // Make a copy of the array with the element at the listed index removed\n      let new_array = [];\n      let new_index = 0;\n      for(let i = 0; i < this.state.playListTracks.length; ++i) {\n        if(i !== index) {\n          new_array[new_index] = this.state.playListTracks[i];\n          new_index++;\n        }\n      }\n      this.setState({playListTracks: new_array});\n    }\n  }\n\n\n  // A method for updating the name of the playlist\n  updatePlayListName(name) {\n    this.setState({playListName: name});\n  }\n\n\n  // A method for saving the playlist to Spotify\n  savePlayList() {\n    // Get the URIs of the tracks in an array\n    const trackURIs = this.state.playListTracks.map(track => {\n      let uri = 'spotify:track:' + track.id;\n      return uri;\n    });\n\n    // Take the name in a variable\n    let name = this.state.playListName;\n\n    // First reset the state values, then callback the save\n    this.setState({\n      playListName: 'New PlayList',\n      playListTracks: []\n    }, () => {\n      Spotify.savePlayList(name, trackURIs);\n    });\n  }\n\n\n  // Asynchronous function for searching for a term from the Spotify WEB API\n  async search(search) {\n    try {\n      // Search for the results\n      let results = await Spotify.search(search)  \n      let items = results[\"tracks\"][\"items\"];\n      let new_results = [];\n      // Array the results approprietly by track name, artist name, album and id\n      for(let i = 0; i < items.length; ++i) {\n        let new_object = {\n          name: items[i].name,\n          artist: items[i].artists[0].name,\n          album: items[i].album.name,\n          id: items[i].id\n        };\n        new_results[i] = new_object;\n      }\n\n      // Set the state\n      this.setState({searchResults: new_results}, () => {\n        console.log(\"Our new search results: \", this.state.searchResults);\n      });\n    }\n\n    catch(error) {}\n  }\n\n  // Title and a multitude of components will be represented: searchbar, searchresults and the playlist. All the components will be controlled by this main component.\n  render() {\n    return (\n      <div>\n        <h1>Ja<span className=\"highlight\">mmm</span>ing</h1>\n        <div className=\"App\">\n          <SearchBar onSearch={this.search} />\n          <div className=\"App-playlist\">\n            <SearchResults searchResults={this.state.searchResults} onAdd={this.addTrack} />\n            <PlayList playListName={this.state.playListName} playListTracks={this.state.playListTracks} onRemove={this.removeTrack} onNameChange={this.updatePlayListName} onSave={this.savePlayList} />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App/App.js';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}